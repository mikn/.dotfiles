#! /usr/bin/python2

import re
import sys
import subprocess

laptop_screen = ['eDP1', 'LVDS']
inch = 25.4
# TODO scaling factor
# TODO write toggle switch to cycle through different setups
# TODO output dpi in a parseable manner
# TODO switch to indicate startx vs DRM event


def dpi_mangle(dpi):
    if dpi <= 150:
        return 96  # Normal DPI
    if dpi > 150 and dpi <= 190:
        return 144  # Normal DPI * 1.5
    if dpi > 190 and dpi <= 210:
        return 168  # Normal DPI * 1.75
    if dpi > 210:
        return 192  # Normal DPI * 2


def get_screens():
    xrandr = subprocess.Popen(['xrandr', '--prop', '--query'], stdout=subprocess.PIPE)
    xrandr_out, xrandr_err = xrandr.communicate()
    #xrandr_out = xrandr_out.decode('utf-8')
    if xrandr.returncode:
        sys.stdout.write('Problems with xrandr!\n Error message: %s' % xrandr_err)
        sys.exit(1)

    matches = re.finditer(r'(?P<output>[\w-]+)\s+connected '
            '(?P<active>(primary )?[\d\w\+]+)?.*?\n'
            '(?P<EDID>\s+EDID:\s*\n(?:\s+[0-9a-f]+\n)+)'
            '(\s+[a-zA-Z].+\n)*'
            '\s+(?P<px_width>\d+)x(?P<px_height>\d+)', xrandr_out, flags=re.MULTILINE)
    disconnected_matches = re.finditer(r'(?P<output>[\w-]+)\s+disconnected\s+(primary )?[\d\w\+]+', xrandr_out)
    re_edid = re.compile(r'Detailed mode:.+?(?P<size>(?P<width>\d+) mm x (?P<height>\d+) mm)')

    screens = [m.groupdict() for m in matches]
    active = [m for m in screens if m['active']]
    disconnected = [m.groupdict() for m in disconnected_matches]
    print('Found %d screens, where %d is active and %d is disconnected!' % (
        len(screens), len(active), len(disconnected)))
    for screen in screens:
        edid = subprocess.Popen(['edid-decode'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        edid_out, _ = edid.communicate(input=screen['EDID'])
        screen.update(re_edid.search(edid_out).groupdict())
        del(screen['EDID'])

        try:
            dpi = int(screen['px_width'])/(int(screen['width'])/inch)
        except:
            dpi = 96
        screen['real_dpi'] = dpi
        screen['dpi'] = dpi_mangle(dpi)
        print('Screen %(output)s has max res %(px_width)sx%(px_height)s and '
        'size %(size)s. This gives a native dpi of %(real_dpi)d and a '
        'mangled dpi of %(dpi)s.' % screen)
    return screens, disconnected

screens, deactivate = get_screens()

# one screen, ensure laptop screen activated
# two screens, activate both
# three screens, deactivate laptop screen
no_screens = len(screens)

activate = screens[::1]
if no_screens > 2:
    activate = [s for s in screens if s['output'] not in laptop_screen]
    deactivate.extend([s for s in screens if s['output'] in laptop_screen])

primary = activate.pop(0)
cmd = ['xrandr', '--output', primary['output'], '--auto', '--primary']
for screen in activate:
    cmd.extend(['--output', screen['output'], '--auto', '--right-of', primary['output']])

for screen in deactivate:
    cmd.extend(['--output', screen['output'], '--off'])

print(cmd)
compton = ['compton', '-bC', '--backend', 'glx', '--paint-on-overlay',
           '--unredir-if-possible', '--glx-no-stencil', '--glx-no-rebind-pixmap']
#xrandr = subprocess.Popen(cmd, stdout=subprocess.PIPE)
#xrandr_out, xrandr_err = xrandr.communicate()
#subprocess.call(['nitrogen', '--restore'])
if xrandr.returncode:
    sys.stdout.write('Problems with xrandr!\n Error message: %s' % xrandr_err)
    sys.exit(1)
