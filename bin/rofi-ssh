#! /usr/bin/env python3.6

import argparse
import os
import os.path
import sys
import subprocess

import yaml
from rofi import Rofi
from pysys import serveradmin, ansible, json
import simplejson

parser = argparse.ArgumentParser()
parser.add_argument('-u', '--update', help='Updates the cache',
                    action='store_true')
parser.add_argument('-c', '--cache-file', help='Cache file',
                    default='~/tmp/rofi-ssh-inventory.json')
parser.add_argument('-t', '--terminal', help='Terminal emulator',
                    default='termite -e')
args = parser.parse_args()
args.cache_file = os.path.realpath(os.path.expanduser(args.cache_file))

data = None

def data_formatter(hostvars):
    return {k.replace('ansible_', ''): v for k, v in hostvars.items() if 'ansi' in k}

if not os.path.exists(args.cache_file) or args.update:
    with open('/etc/serveradmin_api.yml') as conf_file:
        conf_dict = yaml.load(conf_file)['prod']
        conf = serveradmin.ClientConfig.from_dict(conf_dict)
    sa_client = serveradmin.Client(config=conf)
    inventory = sa_client.inventory()
    hostvars = ansible.inventory_to_hostvars(inventory, port=1022)
    bs_hostvars = ansible.inventory_to_hostvars(inventory, port=22, become=True)
    data = {}

    for server in inventory:
        data[server] = {
            'bootstrap': bs_hostvars[server],
            'normal': hostvars[server]
        }

    with open(args.cache_file, 'w') as cf:
        json.dump(data, cf)

    print('Wrote cache file to {}!'.format(args.cache_file))
    sys.exit(0)

with open(args.cache_file, 'r') as cf:
    data = simplejson.load(cf)

rofi = Rofi()

options = {'{0:60}({1})'.format(k, v['normal']['ansible_host']): k for k, v in data.items()}
options_list = sorted(options.keys())
index, key = rofi.select('XV Host:', options_list, key1=(
    'Alt+Return', 'Force using bootstrap credentials'))

print(index, key)
if key not in (0, 1):
    sys.exit(0)

connect_with = 'bootstrap' if key == 1 else 'normal'

selected = data[options[options_list[index]]][connect_with]
ssh_to = '{ansible_user}@{ansible_host} -p {ansible_port}'.format(**selected)
print(selected)

ssh_cmd = ['ssh', '-p', str(selected['ansible_port']), '-l',
           selected['ansible_user'], selected['ansible_host']]
env = os.environ.copy()
if selected['ansible_port'] != 1022:
    ssh_cmd.insert(0, 'sshpass')
    env['SSHPASS'] = selected['ansible_ssh_pass']

cmd = args.terminal.split(' ') + [' '.join(ssh_cmd)]
print(cmd)
term_proc = subprocess.Popen(cmd)
term_proc.communicate()
